#ifndef PBR_FUNCTIONS_GLSLH
#define PBR_FUNCTIONS_GLSLH

const float PI = 3.141592;

float DistributionGGX(float cosLh, float roughness)
{
	float alpha   = roughness * roughness;
	float alphaSq = alpha * alpha;

	float denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;
	return alphaSq / (PI * denom * denom);
}

float gaSchlickG1(float cosTheta, float k)
{
	return cosTheta / (cosTheta * (1.0 - k) + k);
}

float CalculateAttenuation(float distance, float radius)
{
	float attenuation = 1.0 / (distance * distance);
	float distanceFactor = distance / radius;
	float smoothFactor = 1.0 - smoothstep(0.8, 1.0, distanceFactor);
	// UE version
 	// float fadeFactor = pow(1.0 - pow(min(1.0, distanceFactor), 4.0), 2.0);
	return attenuation * smoothFactor;
}

float GeometrySchlickGGX(float cosLi, float cosLo, float roughness)
{
	float r = roughness + 1.0;
	float k = (r * r) / 8.0; // Epic suggests using this roughness remapping for analytic lights.
	return gaSchlickG1(cosLi, k) * gaSchlickG1(cosLo, k);
}

vec3 fresnelSchlick(vec3 F0, float cosTheta)
{
	return F0 + (vec3(1.0) - F0) * pow(1.0 - cosTheta, 5.0);
}

#endif // PBR_FUNCTIONS_GLSLH